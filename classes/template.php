<?phpclass template{	protected $content;		public function __construct($file)	{		global $config;				$templateFile = $config['root'] . 'templates/' . $GLOBALS['config']['template'] . '/' . $file;		$backupFile = $config['root'] . 'templates/ytm/' . $file;				if (file_exists($templateFile)) {			$this->content = file_get_contents($templateFile);		} else if(file_exists($backupFile)) {			$this->content = file_get_contents($backupFile);		} else {			die('<b>[FATAL ERROR]</b> Template file "' . $templateFile . '" was not found.');		}	}		public function setTag($tag, $content)	{		$this->content = str_replace('{' . $tag . '}', $content, $this->content);		return $this;	}		public function setTagLoop($tag, $tagsAndContents)	{		$repeatStart = strpos($this->content, '[repeater:' . $tag . ']') + strlen('[repeater:' . $tag . ']');		$repeatEnd = strpos($this->content, '[/repeater:' . $tag . ']');		$repeatContent = substr($this->content, $repeatStart, $repeatEnd - $repeatStart);		$tagContent = '';				if (is_array($tagsAndContents)) {			foreach($tagsAndContents as $tagAndContent) {				$replacement = $repeatContent;				if (is_array($tagAndContent)) {					foreach ($tagAndContent as $contenttag => $content) {						$replacement = str_replace('{' . $contenttag . '}', $content, $replacement);					}				}				$tagContent .= $replacement;			}		}				$this->content = str_replace('[repeater:' . $tag . ']' . $repeatContent . '[/repeater:' . $tag . ']', $tagContent, $this->content);		return $this;	}		public function parseFile($tag, $file)	{		if (file_exists($file) and !is_dir($file)) {			ob_start();			require $file;			$content = ob_get_contents();			ob_end_clean();		}				$this->content = str_replace('{' . $tag . '}', $content, $this->content);		return $this;	}		public function getContent()	{		return $this->content;	}		public function __toString()	{		return $this->getContent();	}}
<?php	class template	{		private $template;				public function __construct($item, $usetemplatefolder = true){			if($usetemplatefolder){				$templatefile = $GLOBALS['config']['templateroot'].$GLOBALS['config']['template'].'/'.$item;				$backupfile = $GLOBALS['config']['templateroot'].'basic/'.$item;				if(file_exists(substr($templatefile, 0, 255)))					$this->template = file_get_contents($templatefile);				else if(file_exists(substr($backupfile, 0, 255)))					$this->template = file_get_contents($backupfile);				else					die('<br /><br /><b>class</b> template: [ERROR] Template file "'.$templatefile.'" not found using the default template root. Also the basic template file was not found.');			}			else if(file_exists(substr($item, 0, 255)))				$this->template = file_get_contents($item);			else				die('<br /><br /><b>class</b> template: [ERROR] Template file "'.$templatefile.'" was not found.');		}				public function setcontent($item, $value, $string = "", $isfile = true){			if($string == ""){				if(file_exists(substr($value, 0, 255)) && $isfile)					$this->template = str_replace("{".$item."}",$this->parsefile($value),$this->template);				else					$this->template = str_replace("{".$item."}",$value,$this->template);			}			else if(file_exists(substr($value, 0, 255)) && $isfile)				return str_replace("{".$item."}",$this->parsefile($value),$string);			else				return str_replace("{".$item."}",$value,$string);		}				public function repeater($name, $content, $fixcontent = null){			$ismain = empty($fixcontent);			$fixcontent = empty($fixcontent)?$this->template:$fixcontent;			$repeatstart = strpos($fixcontent, "[repeater:".$name."]") + strlen("[repeater:".$name."]");			$repeatend = strpos($fixcontent, "[/repeater:".$name."]");			$repeatstr = substr($fixcontent, $repeatstart, $repeatend - $repeatstart);			$repeatnew = '';			if(is_array($content))				foreach($content as $key => $value){					$repeatdefault = $repeatstr;					if(is_array($value))						foreach($value as $subkey => $subvalue){							if(is_array($subvalue))								$repeatdefault = $this->repeater($subkey, $subvalue, $repeatdefault);							else								$repeatdefault = $this->setcontent($subkey, $subvalue, $repeatdefault, false);						}					$repeatnew .= $repeatdefault;				}			if($ismain)				$this->template = str_replace("[repeater:".$name."]".$repeatstr."[/repeater:".$name."]", $repeatnew, $fixcontent);			else return str_replace("[repeater:".$name."]".$repeatstr."[/repeater:".$name."]", $repeatnew, $fixcontent);		}				public function parsefile($file){			if(file_exists($file) and !is_dir($file)){				ob_start();				include($file);				$content = ob_get_contents();				ob_end_clean();			}			return $content;		}				public function display(){			return($this->template);		}				public function __toString(){			return $this->display();		}	}?>